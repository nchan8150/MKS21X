//Worked on it by myself, but I could not get it to work, so I got help from Robin, who taught me how to do it.

import java.io.*;
import java.util.*;

public class WordSearch{

    private char[][]data;
    private Random randgen;
    private ArrayList<String> wordsToAdd = new ArrayList<String>();
    private ArrayList<String>wordsAdded = new ArrayList<String>();
    private static int seed;
    private static String key;
    private static int rows;
    private static int cols;

    public WordSearch( int rows, int cols, String fileName) {
    data = new char[rows][cols];
    clear();
    seed = (int)(Math.random() * 1000);
        randgen = new Random(seed);
    try {
        Scanner file = new Scanner(new FileReader(fileName));
        while(file.hasNext()) {
        wordsToAdd.add(file.next().toLowerCase());
        }
    } catch (IOException x) {
        System.out.println("Words not in correct format!");
        //x.printStackTrace();
    }
    }

    public WordSearch(int rows, int cols, String fileName, int randSeed) {
    data = new char[rows][cols];
    clear();
    seed = randSeed;
    randgen = new Random(seed);
    try {
        Scanner file = new Scanner(new FileReader(fileName));
        while(file.hasNext()) {
        wordsToAdd.add(file.next().toLowerCase());
        }
    } catch (IOException x) {
        System.out.println("Words not in correct format!");
        //x.printStackTrace();
    }
    }

    public WordSearch (int rows, int cols, String fileName, int randSeed, String answerKey) {
    data = new char[rows][cols];
    clear();
    seed = randSeed;
    randgen = new Random(seed);
        answerKey = key;
    //System.out.println(rows);
    try {
        Scanner file = new Scanner(new FileReader(fileName));
        while(file.hasNext()) {
        wordsToAdd.add(file.next().toLowerCase());
        //System.out.println(rows);
        }
    } catch (IOException x) {
        System.out.println("Words not in correct format!");
        //x.printStackTrace();
    }
    //System.out.println(rows);
    }
   
    private void clear(){
        for (int x = 0; x < data.length; x++) {
            for (int index = 0; index < data[x].length; index++) {
                data[x][index] = '_';
            }
        }
    }

    private boolean checkAddWord (int r, int c, String word, int rowIncrement, int colIncrement) {
    if (rowIncrement == 0 && colIncrement == 0) {
        return false;
    }
    if ((r + word.length() > data.length) || (c + word.length() > data[r].length)) {
        return false;
    }    
    for (int x = 0; x < word.length(); x++) {
    	if ((r + x * rowIncrement > rows) || (r + x * rowIncrement < 0) || (c + x * colIncrement > cols) || (c + x * colIncrement < 0)) {
            return false;
            }
        if ((data[r + x * rowIncrement][c + x * colIncrement] != '_') && (word.charAt(x) != data[r + x * rowIncrement][c + x * colIncrement]) ) {
        return false;
        }
        
    }
    return true;
    }
  
   private boolean addWord (String word,int row, int col, int rowIncrement, int colIncrement) {
    	if (data.length - col >= word.length() && data.length - row >= word.length() && checkAddWord(word, row, col, rowIncrement, colIncrement)) {
    	    for (int i = 0; i < word.length(); i++) {
    	    	data[row + i * rowIncrement][col + i * colIncrement] = word.charAt(i);
    	    }
    	    return true;
    	} 
    	else {
    	    return false;
    	}
    }

  
    private void fillUpRest(){
    	for (int i = 0; i < rows; i++){
    		for (int j = 0; j < cols; j++){
    			if (data[i][j] == '_'){
    				data[i][j] = getRandomLetter();
    			}
    		}
    	}
    }

    private void  addAllWords() {
    for (int i = 0; i < wordsToAdd.size(); i++) {
    		int indexUsed = randgen.nextInt(wordsToAdd.size());
    	    String word = wordsToAdd.get(indexUsed);
    	    boolean wordAddedflag = false;
    	    int trials = 0, randomRow, randomColumn, rowIncrement, colIncrement;
    	    while (!wordAddedflag && trials <= 300) {
    	    	//System.out.println(rows);
    	    	randomRow = randgen.nextInt(rows);
    	    	randomColumn = randgen.nextInt(cols);
    	    	rowIncrement = randgen.nextInt(3) - 1;
    	    	colIncrement = randgen.nextInt(3) - 1;
	    		if (addWord(word, randomRow, randomColumn, rowIncrement, colIncrement)) {
		    		    wordsToAdd.remove(indexUsed);
		    		    wordsAdded.add(word);
		    		    wordAddedflag = true;
		    		    i -= 1;
	    			}
	    		trials += 1;
    	    }
    	}
    }

    private char getLetter() {
    String letters = "abcdefghijklmnopqrstuvwxyz";
    return letters.charAt(randgen.nextInt(letters.length()));
    }

    private char fill(int r, int c) {
    if (data[r][c] == '_') {
        data[r][c] = getLetter();
    }
    return data[r][c];
    }

    public String toString(){
    		String output = "";
    		if (data.length == 0){
    			return "[]";
    		}
    		for (int a = 0; a < data.length; a++){
    			for (int b = 0; b < data[a].length; b++){
    				output += data[a][b];
    				if (b != data.length - 1){
    					output += " ";
    				} 
    			}
    			output += "\n";
    		}
    		output += "\nSeed: " + getSeed() + "\n";
    		output += "Words in the puzzle: \n";
    		String a = wordsAdded.toString();
    		output += (a).substring(1,(a).length() - 1);
        return output;
    	}   

    
    public static void main(String[] args){
    		try {
    			int r = Integer.parseInt(args[0]);
    		    int c = Integer.parseInt(args[1]);
    			if (r == 0 || c == 0 || !(args[2].substring(args[2].length() - 4).equals(".txt"))){
    	    			throw new ArrayIndexOutOfBoundsException();
    			}
    			if (args.length > 3){
    	    			int seed = Integer.parseInt(args[3]);
    	    			WordSearch game = new WordSearch(r, c, args[2], seed);
    	    			if (args.length == 5 && args[4].equals("key")){
    	    				System.out.println(ws);
    	    			}
    	    			else{
    	    				game.fillEmpty();
    	    				System.out.println(game);
    	    			}
    			}
    			else{
    	    			WordSearch ws = new WordSearch(r, c, args[2]);
    	    			System.out.println(game.toString());
    	    			game.fillEmpty();
    	    			System.out.println(game);
    			}
    		} 
    		catch(ArrayIndexOutOfBoundsException e){
    			System.out.println("Input WordSearch properties as follows: \n java WordSearch <r> <c> <fileName> <seed> <key> "
    					+ "\n <r>: # rows "
    					+ "\n <c>: # columns "
    					+ "\n <fileName>: name of file with desired words "
    					+ "\n <seed> -- optional: seed for specified word search "
    					+ "\n <key> -- optional: type 'key' for solution");
    		}
    }
     
}

}
